#!/bin/bash
################################################################################# {{{
#The MIT License (MIT)
#
#Copyright (c) 2013 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################################################# }}}

# Parameters {{{
# Directory store file
export LASTDIRFILE=${LASTDIRFILE:-$HOME/.lastDir}
export PREDEFDIRFILE=${PREDEFDIRFILE:-$HOME/.predefDir}
export WINDOWDIRFILE=${WINDOWDIRFILE:-$HOME/.windowDir}
# Number of store directories
export NLASTDIR=${NLASTDIR:-20}

# post cd (overwrite cd (Bash) or chpwd (Zsh))
export ISPOSTCD=${ISPOSTCD:-1}

# COMPLETION
export NOCOMPLETION=${NOCOMPLETION:-0}
export NOCOMPINIT=${NOCOMPLETION:-0}

# cd wrap to pushd/popd
export ISCDWRAP=${ISCDWRAP:-1}
# }}}

_sd_cl () { # main function {{{
  # source sentaku
  if ! type sentaku >& /dev/null ;then
    echo "sd_cl needs sentaku"
    echo "Please install: https://github.com/rcmdnk/sentaku"
    return 1
  fi
  source sentaku -n

  # Set values
  local _SENTAKU_INPUT_FILE=${LASTDIRFILE:-$HOME/.lastDir}
  local _SENTAKU_MAX="${NLASTDIR:-20}"
  local _SENTAKU_SEPARATOR=$'\n'
  local _SENTAKU_SHOWLAST=1

  # sd or cl?
  local sdcl=$1
  shift
  if [ "$sdcl" = "sd" ];then
    # Edit predefined dir
    if [ $# -eq 1 ] && [ "$1" = "-e" ];then
      ${EDITOR:-"vi"} "${PREDEFDIRFILE:-$HOME/.predefDir}"
      return 0
    fi
    # Set Save Dir
    local curdir="$*"
    if [ $# -eq 0 ];then
      # Current directory
      curdir=$(echo $(pwd)|sed "s|^$HOME|\~|")
    fi

    if [ ! -d "${curdir/\~/$HOME}" ];then
      echo "$curdir: No such directory"
      return 1
    else
      _sf_main -p "$curdir" >/dev/null
    fi
    return $?
  elif [ "$sdcl" != "cl" ];then
    echo "Usage: _sd_cl <sd or cl> [arg1 [arg2 [...]]]"
    return 1
  fi

  # cl

  # Help
  local _s_help="
  Usage: cl [-lcph] [-n <number> ] [<number>] [<directory>]
  If there are no arguments, you will move to the last saved directory by sd command.
  If you give any directory name, it searches for it in saved directories
  and cd to there if only one is found.
  If more than one directories are found, go to the selection mode.

  Arguments:
     -l          Show saved directories
     -c          Show saved directories and choose a directory
     -C          Clear directories
     <number>    Move to <number>-th last directory
     -n <number> Move to <number>-th last directory (obsolete)
     -N          No header for selection window
     -p          Move to pre-defiend dirctory in $PREDEFDIRFILE
     -w          Move to other window's (screen/tmux) dirctory in $WINDOWDIRFILE
     -b          Move back to moving histories
     -v          Move from current directory, like Vim
     -h          Print this HELP and quit
"

  # Initialize variables
  local list=0
  local predef=0
  local window=0
  local vim=0
  local back=0
  local cleardir=0
  local dir=""

  _sf_initialize_user () {
    _s_delete=1
    _s_dir=""
  }
  _sf_finalize_user () {
    unset _s_delete
    unset _s_dir
  }

  _sf_check_args () { # {{{
    # Get arguments
    _s_continue=0
    while [ $# -gt 0 ];do
      case $1 in
        "-l" ) list=1;;
        "-c" ) _s_align=1;;
        "-n" ) _s_current_n="$2"; shift;;
        "-p" ) predef=1; window=0; vim=0; back=0;;
        "-w" ) window=1; predef=0; vim=0; back=0;;
        "-v" ) vim=1; predef=0; window=0; back=0; _s_delete=0;;
        "-b" ) back=1; vim=0; predef=0; window=0; _s_delete=0;;
        "-C" ) cleardir=1;;
        "-N" ) _s_noheader=1;;
        "-m" ) ;;
        "-h" )
          echo "$_s_help"|${PAGER:-less} >/dev/tty
          return 0
          ;;
        "--" ) shift; _s_dir="$*"; break;;
        * )
          if [ "$1" != "/" ] && expr "$1" : "[0-9]*" >/dev/null;then
            _s_current_n=$1
            break
          else
            _s_dir="$*"
            break
          fi
          ;;
      esac
      shift
    done

    # Set a file other than LASTDIRFILE
    if [ $predef -eq 1 ] || [ $window -eq 1 ];then
      if [ $predef -eq 1 ];then
        _s_file=${PREDEFDIRFILE:-$HOME/.predefDir}
      elif [ $window -eq 1 ];then
        _s_file=${WINDOWDIRFILE:-$HOME/.windowDir}
      elif [ $vim -eq 1 ] || [ $back -eq 1 ];then
        _s_file=""
      fi
    fi

    # List up
    if [ $list -eq 1 ];then
      if [ "$_s_file" != "" ];then
        local i=0
        while read line;do
          printf "%3d %s\n" $i "$(echo $line|sed "s|^$HOME|\~|")"
          ((i++))
        done < $_s_file
      elif [ $back -eq 1 ];then
        dirs -v -p
      fi
      return 0
    fi

    # Clear
    if [ $cleardir -eq 1 ];then
      if [ "$_s_file" != "" ];then
        echo -n > $_s_file
      elif [ $back -eq 1 ];then
        dirs -c
      fi
      return 0
    fi

    # Functions for vim mode
    if [ $vim -eq 1 ];then
      _sf_get_values () {
        # Get variables
        local orig_ifs=$IFS
        IFS="$_s_s"
        #_s_inputs=($(ls -F|grep "/$")) # Only visible directories
        _s_inputs=($(find . -type d -maxdepth 1|grep -v "^.$"|cut -d'/' -f2)) # All (including .*) directories
        local -a inputs_tmp
        inputs_tmp=($(find . -type l -maxdepth 1|cut -d'/' -f2)) # Symbolic links
        local l
        for l in "${inputs_tmp[@]}";do
          if ls -l "$l"|grep "/$";then
            _s_inputs=("${_s_inputs[@]}" "$l")
          fi
        done
        if [ "$(pwd)" != "/" ];then
          _s_inputs=(".." "${_s_inputs[@]}")
        fi
        # Sort
        _s_inputs=($(echo "${_s_inputs[*]}"|sort))
        IFS=$orig_ifs
        _s_n=${#_s_inputs[@]}
        local i
        for i in $(seq 0 $((_s_n-1)));do
          _s_v_selected[$i]=0
        done
      }
    fi

    # Functions for back mode
    if [ $back -eq 1 ];then
      _sf_get_values () {
        # Get variables
        local orig_ifs=$IFS
        IFS="$_s_s"
        _s_inputs=($(dirs -p))
        IFS=$orig_ifs
        _s_n=${#_s_inputs[@]}
        local i
        for i in $(seq 0 $((_s_n-1)));do
          _s_v_selected[$i]=0
        done
      }
    fi

    # Functions for no option, (-c + -p + -b)
    if [ $_s_align -eq 0 ] && [ $predef -eq 0 ] && [ $window -eq 0 ] &&\
        [ $vim -eq 0 ] && [ $back -eq 0 ];then
      _s_align=0
      # Get variables
      local -a all_inputs
      all_inputs=()
      _s_file=${LASTDIRFILE:-$HOME/.lastDir}
      _sf_get_values_wrapper 0 0
      all_inputs=("${all_inputs[@]}" "${_s_inputs[@]}")
      _s_file=${PREDEFDIRFILE:-$HOME/.predefDir}
      _sf_get_values_wrapper 0 0
      all_inputs=("${all_inputs[@]}" "${_s_inputs[@]}")
      local orig_ifs=$IFS
      IFS="$_s_s"
      _s_inputs=("${all_inputs[@]}" $(dirs -p))
      IFS=$orig_ifs
      _s_file=""
      _s_n=${#_s_inputs[@]}
      _s_v_selected=()
      local i
      for i in $(seq 0 $((_s_n-1)));do
        _s_v_selected=(${_s_v_selected[@]} 0)
      done
      _sf_get_values () {
        :
      }
    fi

    # Change to given directory
    if [ "$_s_dir" != "" ];then
      _s_align=0
      _sf_get_values_wrapper
      _sf_get_values () {
        :
      }

      local orig_ifs=$IFS
      IFS="$_s_s"
      local v
      local -a d
      d=($(for v in "${_s_inputs[@]}";do echo "$v";done|sed "s|~|${HOME}|g"|grep "${_s_dir/#\~/${HOME}}"|sort|uniq))
      _s_inputs=("${d[@]}")
      _s_n=${#_s_inputs[@]}
      if [ $window -eq 1 ];then
        d=($(echo "${d[@]}"|cut -d' ' -f 3-))
      fi

      if [ ${#d[@]} -eq 1 ];then
        _s_current_n=0
        return 0
      elif [ ${#d[@]} -eq 0 ];then
        echo "No such a directory is stored: ${_s_dir}"
        return 1
      fi
      IFS=$orig_ifs
    fi

    _s_continue=1
    return 0
  } # }}}

  _sf_execute () { # {{{
    if [ $back -eq 1 ];then
      pushd +${_s_current_n} >/dev/null
      return
    fi
    local dir="${_s_inputs[$_s_current_n]}"
    if [ $window -eq 1 ];then
      dir=$(grep "^$dir" $_s_file|head -n1|cut -d' ' -f 3-)
    fi
    cd "${dir/#\~/${HOME}}"
    echo "${dir}"
  } # }}}

  _sf_set_header () { # {{{
    _s_header=""
    if [ $_s_noheader = 1 -o $_s_lines -lt 10 ];then
      return
    fi
    if [ $_s_cols -ge 42 ];then
      _s_header=" $_s_n directories in total
 vimike updown, e.g)j:down, k:up, gg/G
 Enter/Space(select), q(quit), d(delete)"
      if [ $vim -eq 1 ];then
        :
      elif [ $window -eq 1 ];then
        _s_header="$_s_header
 n Window Pane Directory"
      elif [ $predef -eq 1 ];then
        :
      elif [ $back -eq 1 ];then
        :
      else
        _s_header="$_s_header
 p(put to pre-defined)"
      fi
      _s_header="$_s_header\n"
    fi
  }  # }}}

  _sf_p () { # {{{
    _s_is_print=0
    if [ $predef -eq 1 ] || [ $vim -eq 1 ] || [ $back -eq 1 ];then
      return
    fi
    local pdf=${PREDEFDIRFILE:-$HOME/.predefDir}
    touch "$pdf"
    if ! grep -q "^${_s_inputs[$_s_current_n]}$" "$pdf";then
      echo "${_s_inputs[$_s_current_n]}" >> "$pdf"
      _sf_echo_printall "${_s_inputs[$_s_current_n]} was pushed in $pdf"
    fi
  } # }}}

  _sf_select () { # {{{
    if [ $vim -eq 1 ];then
      if [ -d "${_s_inputs[$_s_current_n]}" ];then
        cd "${_s_inputs[$_s_current_n]}"
        _sf_get_values
        _sf_reset
      else
        _sf_echo "${_s_inputs[$_s_current_n]} is not a directory"
      fi
    elif [ $vim -eq 0 ];then
      _s_break=1
      return
    fi
  } # }}}

  _sf_main -m "$@"
} # }}}

sd () { # Save dir {{{
  _sd_cl sd "$@"
} # }}}

cl () { # Change directory to the Last directory {{{

  # Change to the last dir
  if [ $# -eq 0 ];then
    local ld="$(head -n1 "${LASTDIRFILE:-$HOME/.lastDir}")"
    if [ "$ld" != "" ];then
      eval cd "$ld" # eval to expand ~
      echo "$ld"
      return 0
    else
      echo "There is no saved directory."
      return 1
    fi
  fi

  # sd_cl
  _sd_cl cl "$@"

} # }}}

# Completion {{{
if [ $NOCOMPLETION -eq 0 ];then
  if [ "$ZSH_VERSION" != "" ];then
    if [ $NOCOMPINIT -eq 0 ];then
      autoload -Uz compinit
      compinit
    fi

    _cl () { # {{{
      typeset -A opt_args
      local context state line
      _arguments \
        '-l:: :->non'\
        '-c:: :->lastdir'\
        '-C:: :->non'\
        '-n:: :->xxx'\
        '-N:: :->xxx'\
        '-p:: :->predef'\
        '-w:: :->window'\
        '-b:: :->back'\
        '-v:: :->non'\
        '-h:: :->non'
      local ldf=""
      if echo "$state"|grep -q non;then
        return 0
      elif echo "$state"|grep -q predef;then
        ldf=${PREDEFDIRFILE:-$HOME/.predefDir}
      elif echo "$state"|grep -q window;then
        ldf=${WINDOWDIRFILE:-$HOME/.windowDir}
      elif echo "$state"|grep -q back;then
        :
      elif echo "$state"|grep -q lastdir;then
        ldf=${LASTDIRFILE:-$HOME/.lastDir}
      else
        ldf=all
      fi
      local orig_ifs=$IFS
      IFS=$'\n'
      if [ "$ldf" = "all" ];then
        ldf=${LASTDIRFILE:-$HOME/.lastDir}
        local pdf=${PREDEFDIRFILE:-$HOME/.predefDir}
        touch "$ldf"
        touch "$pdf"
        compadd $(cat "$ldf"|sed "s|~|$HOME|")
        compadd $(cat "$pdf"|sed "s|~|$HOME|")
        compadd $(dirs -p|sed "s|~|$HOME|")
      elif [ "$ldf" != "" ];then
        compadd $(cat $ldf|sed "s|~|$HOME|")
      else
        compadd $(dirs -p|sed "s|~|$HOME|")
      fi
      IFS=$orig_ifs
    }
    compdef _cl cl
    # }}}
    _bd () { # {{{
      typeset -A opt_args
      local orig_ifs=$IFS
      IFS=$'\n'
      compadd "$(dirs -p)"
      IFS=$orig_ifs
    }
    compdef _bd bd
    # }}}
  elif [ "$BASH_VERSION" != "" ];then
    _cl () { # {{{
      COMPREPLY=()
      local cur=${COMP_WORDS[COMP_CWORD]}
      local prev=${COMP_WORDS[COMP_CWORD-1]}
      local -a opts
      local -a opts_nocomp
      opts=(-l -c -C -n -N -p -w -b -v -h)
      opts_nocomp=(-l -C -v -h)
      local nocomp=0
      local i
      for i in $(seq 1 $((COMP_CWORD)));do
        if [ "${COMP_WORDS[$i]}" = "" ] || [ "${COMP_WORDS[$i]}" = "-" ];then
          continue
        fi
        if echo "${opts[@]}"|grep -q -- "${COMP_WORDS[$i]}";then
          opts=($(echo "${opts[@]}"|sed "s/${COMP_WORDS[$i]}//"))
          if echo "${opts_nocomp[@]}"|grep -q -- "${COMP_WORDS[$i]}";then
            nocomp=1
          fi
        fi
      done

      if [[ "$cur" == -* ]];then
        COMPREPLY=($( compgen -W "${opts[*]}" -- "$cur"))
        return
      elif [ "${COMP_WORDS[$i]}" != "" ] && echo "${opts[@]}"|grep -q "$cur";then
        COMPREPLY=("$cur")
        return
      elif [ $nocomp -eq 1 ];then
        return
      elif [[ "$prev" != -* && $COMP_CWORD -ne 1 ]];then
        return
      fi

      local ldf=${LASTDIRFILE:-$HOME/.lastDir}
      local pdf=${PREDEFDIRFILE:-$HOME/.predefDir}
      local wdf=${WINDOWDIRFILE:-$HOME/.windowDir}
      local d=""

      local orig_ifs=$IFS
      IFS=$'\n'
      case $prev in
        -c)touch "$ldf" && d=$(cat "$ldf");;
        -p)touch "$pdf" && d=$(cat "$pdf");;
        -w)touch "$ldf" && d=$(cat "$wdf");;
        -b)d=$(dirs -p);;
        *)
          touch "$ldf" && touch "$pdf" && d=$(cat "$ldf")$'\n'$(cat "$pdf")$'\n'$(dirs -p)
          ;;
      esac
      COMPREPLY=($(echo "$d"|grep "$cur"))
      IFS=$orig_ifs
    }
    complete -F _cl cl
    # }}}
    _bd () { # {{{
      local orig_ifs=$IFS
      local cur=${COMP_WORDS[COMP_CWORD]}
      IFS=$'\n'
      COMPREPLY=($( compgen -W "$(dirs -p)" -- "$cur"))
      IFS=$orig_ifs
    }
    complete -F _bd bd
    # }}}
  fi
fi
# }}}

# function for post cd in screen or tmux{{{
post_cd () {
  :
}
if [ -n "$STY" ];then
  post_cd () {
    local wdf=${WINDOWDIRFILE:-$HOME/.windowDir}
    touch "$wdf"
    if grep -q "^$WINDOW 0 " "$wdf";then
      sed "s|^$WINDOW 0 .*$|$WINDOW 0 $(pwd)|" "$wdf"|sort -n > "${wdf}.tmp"
      mv "${wdf}.tmp" "${wdf}"
    else
      (cat "$wdf" && echo "$WINDOW 0 $(pwd)")|sort -n > "${wdf}.tmp"
      mv "${wdf}.tmp" "${wdf}"
    fi
  }
elif [ -n "$TMUX" ];then
  post_cd () {
    local window="$(tmux display -p '#I')"
    local pane="$(tmux display -p '#P')"
    local wdf=${WINDOWDIRFILE:-$HOME/.windowDir}
    touch "$wdf"
    if grep -q "^$window $pane " "$wdf";then
      sed "s|^$window $pane .*$|$window $pane $(pwd)|" "$wdf"|sort -n > "${wdf}.tmp"
      mv "${wdf}.tmp" "${wdf}"
    else
      (cat "$wdf" && echo "$window $pane $(pwd)")|sort -n > "${wdf}.tmp"
      mv "${wdf}.tmp" "${wdf}"
    fi
  }
fi
# }}}

# function for cd wrap to pushd/popd {{{
wrap_cd () {
  local dir="$*"
  if [ "$*" = "" ];then
    if [ "$(pwd)" = "$HOME" ];then
      return
    else
      dir="$HOME"
    fi
  elif [ "$*" = "-" ];then
    pushd >/dev/null
    return
  else
    if [ -f "$*" ];then
      dir=$(dirname "$*")
    fi
  fi
  pushd "$dir" >/dev/null
}

# Alias for popd
bd () {
  if [ $# -eq 0 ];then
    # 0 is current directory
    cl -b 1
  else
    cl -b "$*"
  fi
}
# }}}

# Set cd/chpwd {{{
if [ "$ZSH_VERSION" != "" ];then
  if [ $ISPOSTCD -eq 1 ];then
    chpwd () {
      post_cd
    }
  fi
  if [ $ISCDWRAP -eq 1 ];then
    cd () {
      wrap_cd "$*"
    }
  fi
else
  if [ $ISPOSTCD -eq 1 ] && [ $ISCDWRAP -eq 1 ];then
    cd () {
      wrap_cd "$*"
      local ret=$?
      if [ $ret -eq 0 ];then
        post_cd
      fi
      return $ret
    }
  elif [ $ISPOSTCD -eq 1 ];then
    cd () {
      builtin cd "$*"
      local ret=$?
      if [ $ret -eq 0 ];then
        post_cd
      fi
      return $ret
    }
  elif [ $ISCDWRAP -eq 1 ];then
    cd () {
      wrap_cd "$*"
    }
  fi
fi
# }}}

# Move to actual pwd {{{
cdpwd () {
  command cd "$(pwd -P)"
}
# }}}
